import ast
from ast import literal_eval

import pandas as pd
import numpy as np

csv_path = 'formatted_output_file.csv'
df = pd.read_csv(csv_path)
# 네 번째 행 선택 (0부터 시작하므로 인덱스 3)
fourth_row = df.iloc[2]

# 네 번째 행의 값들을 숫자 리스트로 변환
numeric_list = ast.literal_eval(fourth_row['vector'])

# Convert 'vector' column values to numeric
df['vector'] = df['vector'].apply(lambda x: ast.literal_eval(x) if pd.notnull(x) else np.nan)



# 'vector' 컬럼의 NaN 값만 제거
df = df.dropna(subset=['vector'])


A = np.array([-0.0779444,0.14493544,-0.2819694,-0.3295635,0.21320806,-0.5955974,1.7549313,1.1144624,-0.25027728,0.10046111,0.7935881,-0.29751688,-0.414701,-0.08644666,-0.2772477,-0.6490146,-0.24872793,-1.363157,-0.48080814,-1.2960902,0.13014397,-0.3264891,-0.03631781,-0.5280647,-0.45821208,-0.33672094,-0.025838858,0.23858559,-1.8244916,0.4476917,0.030850384,-0.60217863,0.008679235,-0.74869573,-0.43296123,1.3832171,0.0036464855,0.34067327,-0.36025244,-0.444627,-0.2073845,-0.1282331,-0.67150867,0.45332944,0.70294446,-0.8809712,-0.8330271,0.6181681,0.64186174,0.5973726,0.7563899,-1.2862564,0.04739299,-0.6991725,-0.725281,0.31904352,0.48730847,0.5150367,-0.4927603,0.13999748,-0.1698467,-0.68238884,0.2842342,-0.8260501,-1.3870835,1.3789887,-1.2981483,0.6769786,-0.3285609,-0.27882805,0.13255452,0.8588815,0.71899486,-0.042257786,0.2507862,0.012952745,0.5453137,0.521818,-0.12411539,-0.41434807,-0.9977889,0.3259442,-0.84576523,0.04770323,0.105995394,-0.8809957,0.29497355,0.66018784,0.97740215,-0.03721826,0.9794056,0.28243613,-0.19656102,0.19892275,1.1051362,0.794906,-0.2939411,-0.70679027,0.41490805,-0.8433589])
B = np.array([0.018652858,-0.003788533,0.0038535635,0.00025885575,0.0063077905,-0.002073914,0.0067141126,-0.00072775653,0.0005326393,-0.014893065,0.013107891,-0.00035024725,0.0076221097,-0.02127686,0.00088394916,-0.0019983512,0.016807074,0.0075879833,0.009552613,-0.0101238685,0.0062746922,-0.00027532378,-0.00011224758,0.0019243956,-0.010132222,-0.0034656918,0.00866085,0.014598756,-0.0023192242,-0.0073142955,0.007594516,0.00925596,-0.0021620803,-0.0043443823,-0.014254493,-0.0074085183,0.012532106,0.0036382722,-0.024897961,0.01886443,0.001466266,-0.0029656484,-0.016183335,-0.0056949183,-0.009279633,-0.00879656,7.540069e-05,-0.005084909,-0.008032606,0.008285839,0.006447897,-0.003856787,0.00076810794,-0.008896419,0.0020333629,-0.016357495,0.0008286275,-0.014366926,-0.0006904241,0.014739562,-0.0011062112,-0.0007356427,-0.004064535,4.1665277e-05,-0.020093428,0.015210608,0.0017322428,0.015963674,-0.021470133,-0.009256955,-0.008636033,0.0070453733,0.0029178807,0.013013785,-0.004706558,0.007717077,0.020489627,0.006401947,-0.019880094,-0.0072860415,-0.011046476,-0.005356581,-0.004779791,0.008045972,-0.005135811,-0.017903013,0.01510799,0.02098273,0.008419561,-0.011742303,0.0014058476,-0.0021232218,0.00016781563,0.020523774,0.0011719227,-0.0009070949,0.0013131993,0.005650644,-0.007957546,0.012420762])


# 2만5천개의 랜덤한 인덱스 선택
print('df.shape[0]:',df.shape[0])

num_vectors = 25000
random_indices = np.random.choice(df.shape[0], num_vectors)

# 선택한 랜덤 인덱스에 해당하는 벡터들을 가져와서 A와 B 사이의 선형 보간 수행
interpolated_vectors = df.iloc[random_indices, 1:].apply(lambda x: A * (1 - x.values.reshape(-1, 1)) + B * x.values.reshape(-1, 1), axis=1)

# 결과 출력 (예시에서는 5개만 출력)
for vector in interpolated_vectors.head().values:
    print(vector)


# # 벡터 A와 B의 차원 수 계산
# dimension_A = A.shape[0]
# dimension_B = B.shape[0]
#
# # 차원 수의 차이 계산
# dimension_difference = abs(dimension_A - dimension_B)
#
# # 결과 출력
# print(f"벡터 A의 차원 수: {dimension_A}")
# print(f"벡터 B의 차원 수: {dimension_B}")
# print(f"차원 수의 차이: {dimension_difference}")

