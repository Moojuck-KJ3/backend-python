
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from ast import literal_eval

# CSV 파일 불러오기
file_path = 'output_file.csv'
df = pd.read_csv(file_path)

# 숫자로 변환
df.iloc[:, 1:] = df.iloc[:, 1:].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in the 'vector' column
df = df.dropna(subset=['vector'])


# 벡터 A와 벡터 B 정의 (원하는 값으로 수정)
vector_a = np.array([0.05539777, 0.030741, 0.05080532, -0.01891599, 0.01623582, -0.1594384, 0.10848426, 0.19008654, -0.05403742, -0.06832503, -0.04935854, -0.09615137, -0.04318109, 0.0040481, 0.0288894, -0.06370235, -0.04203193, -0.04683845, -0.0191957, -0.17400615, 0.0030355, 0.0055835, 0.03023768, -0.03236115, -0.1176121, 0.01117372, -0.02941227, -0.00879955, -0.18859711, 0.04636665, 0.05783653, -0.08123317, -0.01036203, -0.1273115, -0.09274212, 0.07300207, -0.00958941, 0.11132407, -0.06188999, -0.08641848, -0.03172877, -0.04375037, -0.13119382, 0.05689422, 0.01665789, -0.16929154, -0.07640783, 0.01299616, 0.01130701, 0.13202019, 0.0526076, -0.17410268, -0.08177652, -0.04070497, -0.03213899, 0.09894139, 0.01676267, 0.14256513, 0.02261818, 0.08586853, -0.0081035, -0.06437713, -0.02928782, 0.09108452, -0.18219046, 0.10920112, -0.07320551, 0.08774593, -0.06459667, 0.06473086, -0.02049056, 0.19522941, 0.091271, -0.07092457, 0.04330131, 0.15538213, 0.11984162, 0.02850195, -0.10520031, 0.02409657, -0.1308199, 0.03161634, -0.15906703, 0.15340018, -0.03264741, -0.03639673, -0.06502119, 0.11275908, 0.14268044, -0.03845001, 0.06503036, -0.01639445, 0.00468554, 0.06787484, 0.08965173, 0.05374905, 0.09919474, -0.0933822, 0.05947967, -0.08341659])
vector_b = np.array([-0.05476553, 0.2253563, 0.07947944, -0.12476623, -0.02039499, -0.27438194, 0.15907308, 0.24188723, -0.1485172, -0.02710694, -0.13045375, -0.21233661, 0.09208305, 0.05800278, 0.15659948, -0.1725886, -0.01362267, -0.14910316, -0.03491485, -0.31646544, 0.18067224, -0.04842015, 0.12949286, -0.09817591, -0.04471889, 0.193431, -0.04539117, -0.16194098, -0.23201536, -0.00922251, 0.30131876, -0.05346966, 0.0197543, -0.15816668, -0.2541326, 0.16548175, -0.00375261, 0.12326653, -0.16529219, -0.35105833, -0.04629495, -0.07728317, -0.1406028, -0.11475284, 0.02718993, -0.25891235, -0.15617149, 0.00749913, -0.00823698, 0.12780483, 0.18151656, -0.24781592, -0.1820847, 0.02604826, -0.11338282, 0.19076861, 0.00937967, 0.07963863, -0.20511238, -0.07269381, 0.02904183, -0.00142892, -0.26374975, -0.08609492, -0.07774689, 0.20553324, 0.0030153, 0.06062999, -0.08135669, 0.18263522, -0.06903372, 0.33305836, 0.19688006, 0.0019637, 0.15630557, 0.20472375, 0.01493884, -0.03104162, -0.15051498, 0.17317395, -0.22720663, 0.08928423, -0.16364358, 0.30753914, -0.18057711, -0.13737968, -0.01620154, 0.11212034, 0.13072968, 0.01126961, 0.31676638, -0.01972248, 0.05672361, -0.0197203, 0.27740243, 0.08305455, 0.11836971, -0.2932552, 0.05140962, -0.04586259])

# 코사인 유사도 계산 함수
def cosine_similarity_vectors(vec_a, vec_b):
    vec_a = vec_a.reshape(1, -1)
    vec_b = vec_b.reshape(1, -1)
    return cosine_similarity(vec_a, vec_b)[0][0]

# 벡터 A와 벡터 B 사이의 코사인 유사도 계산
similarity_ab = cosine_similarity_vectors(vector_a, vector_b)

# 'vectors' 컬럼의 각 벡터와 벡터 A, B 간의 코사인 유사도 계산
df['cosine_similarity_a'] = df['vector'].apply(lambda x: cosine_similarity_vectors(np.array(x), vector_a))
df['cosine_similarity_b'] = df['vector'].apply(lambda x: cosine_similarity_vectors(np.array(x), vector_b))

# 벡터 A와 벡터 B 사이의 유사도 범위 내에 있는 벡터들만 선택
selected_vectors = df[(df['cosine_similarity_a'] >= similarity_ab) & (df['cosine_similarity_b'] <= similarity_ab)]

# 선택된 벡터들 출력
print('selected_vectors:', selected_vectors)
